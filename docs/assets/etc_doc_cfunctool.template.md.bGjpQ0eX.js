import{_ as a,c as e,o as s,ae as i}from"./chunks/framework.D5-4uJj8.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/cfunctool.template.md","filePath":"etc/doc/cfunctool.template.md"}'),p={name:"etc/doc/cfunctool.template.md"};function n(l,t,h,r,d,o){return s(),e("div",null,t[0]||(t[0]=[i('<p><a href="./">Home</a> &gt; <a href="./cfunctool.html">cfunctool</a> &gt; <a href="./cfunctool.template.html">template</a></p><h2 id="template-function" tabindex="-1">template() function <a class="header-anchor" href="#template-function" aria-label="Permalink to &quot;template() function&quot;">​</a></h2><p>使用提供的数据替换字符串中的模板占位符。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">str</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">regex</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th><p>Parameter</p></th><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p>str</p></td><td><p>string</p></td><td><p>包含模板占位符的字符串。</p></td></tr><tr><td><p>data</p></td><td><p>any</p></td><td><p>包含替换值的对象。</p></td></tr><tr><td><p>regex</p></td><td><p>RegExp</p></td><td><p><em>(Optional)</em> 可选的正则表达式，用于匹配模板占位符，默认为 <code>/\\{\\{(.+?)\\}\\}/g</code>。</p></td></tr></tbody></table> **Returns:** <p>string</p><p>返回替换后的字符串。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>const templateString = &#39;Hello, {{name}}! You have {{count}} new messages.&#39;; const data = { name: &#39;Alice&#39;, count: 5 }; console.log(template(templateString, data)); // 输出: Hello, Alice! You have 5 new messages.</p>',12)]))}const g=a(p,[["render",n]]);export{c as __pageData,g as default};

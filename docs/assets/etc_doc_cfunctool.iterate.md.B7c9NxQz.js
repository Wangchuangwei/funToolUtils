import{_ as i,c as a,o as s,ae as e}from"./chunks/framework.D5-4uJj8.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/cfunctool.iterate.md","filePath":"etc/doc/cfunctool.iterate.md"}'),n={name:"etc/doc/cfunctool.iterate.md"};function r(p,t,h,l,k,d){return s(),a("div",null,t[0]||(t[0]=[e('<p><a href="./">Home</a> &gt; <a href="./cfunctool.html">cfunctool</a> &gt; <a href="./cfunctool.iterate.html">iterate</a></p><h2 id="iterate-function" tabindex="-1">iterate() function <a class="header-anchor" href="#iterate-function" aria-label="Permalink to &quot;iterate() function&quot;">​</a></h2><p>迭代执行给定的函数指定次数，并返回最终结果。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> iterate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">func</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">current</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">initValue</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th><p>Parameter</p></th><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p>length</p></td><td><p>number</p></td><td><p>迭代的次数。</p></td></tr><tr><td><p>func</p></td><td><p>(current: string) =&gt; string</p></td><td><p>每次迭代要执行的函数。</p></td></tr><tr><td><p>initValue</p></td><td><p>string</p></td><td><p>初始值。</p></td></tr></tbody></table> **Returns:** <p>string</p><p>返回经过指定次数迭代后的最终结果。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>const func = (current) =&gt; current + &#39;a&#39;; console.log(iterate(3, func, &#39;&#39;)); // 输出: aaa console.log(iterate(2, (current) =&gt; current + &#39;b&#39;, &#39;x&#39;)); // 输出: xbb</p>',12)]))}const g=i(n,[["render",r]]);export{c as __pageData,g as default};

import{_ as i,c as s,o as t,ae as n}from"./chunks/framework.D5-4uJj8.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/cfunctool.chain.md","filePath":"etc/doc/cfunctool.chain.md"}'),e={name:"etc/doc/cfunctool.chain.md"};function h(p,a,l,r,c,o){return t(),s("div",null,a[0]||(a[0]=[n('<p><a href="./">Home</a> &gt; <a href="./cfunctool.html">cfunctool</a> &gt; <a href="./cfunctool.chain.html">chain</a></p><h2 id="chain-function" tabindex="-1">chain() function <a class="header-anchor" href="#chain-function" aria-label="Permalink to &quot;chain() function&quot;">​</a></h2><p>创建一个函数链，依次执行给定的函数。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> chain</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">funcs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ((</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th><p>Parameter</p></th><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p>funcs</p></td><td><p>((...args: any[]) =&gt; any)[]</p></td><td><p>一个由函数组成的数组，这些函数将会被依次执行。 每个函数都可以接受任意参数，并返回任何类型的值。</p></td></tr></tbody></table> **Returns:** <p>any</p><p>返回一个新的函数，该函数接受任意参数，并依次将这些参数传递给第一个函数。 每个函数的返回值将作为下一个函数的输入。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>const addOne = (x: number) =&gt; x + 1; const double = (x: number) =&gt; x * 2; const chainedFunction = chain(addOne, double); console.log(chainedFunction(5)); // 输出: 12 (5 + 1 = 6, 6 * 2 = 12)</p>',12)]))}const g=i(e,[["render",h]]);export{k as __pageData,g as default};

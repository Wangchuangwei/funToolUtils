import{_ as i,c as a,o as e,ae as t}from"./chunks/framework.D5-4uJj8.js";const d=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/cfunctool.series.md","filePath":"etc/doc/cfunctool.series.md"}'),n={name:"etc/doc/cfunctool.series.md"};function r(p,s,l,h,o,k){return e(),a("div",null,s[0]||(s[0]=[t('<p><a href="./">Home</a> &gt; <a href="./cfunctool.html">cfunctool</a> &gt; <a href="./cfunctool.series.html">series</a></p><h2 id="series-function" tabindex="-1">series() function <a class="header-anchor" href="#series-function" aria-label="Permalink to &quot;series() function&quot;">​</a></h2><p>创建一个系列对象，提供对数组中元素的便捷访问方法。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> series</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arrays</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">toKey</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">item</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th><p>Parameter</p></th><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p>arrays</p></td><td><p>any</p></td><td><p>包含元素的数组。</p></td></tr><tr><td><p>toKey</p></td><td><p>(item: any) =&gt; any</p></td><td><p><em>(Optional)</em> 可选的函数，用于将元素转换为唯一的键，默认为返回元素本身。</p></td></tr></tbody></table> **Returns:** <p>any</p><p>返回一个包含多种访问方法的对象。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2><p>const seriesObj = series([&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]); console.log(seriesObj.min(&#39;b&#39;, &#39;c&#39;)); // 输出: &#39;b&#39; console.log(seriesObj.max(&#39;b&#39;, &#39;c&#39;)); // 输出: &#39;c&#39; console.log(seriesObj.first()); // 输出: &#39;a&#39; console.log(seriesObj.last()); // 输出: &#39;c&#39; console.log(seriesObj.next(&#39;b&#39;)); // 输出: &#39;c&#39; console.log(seriesObj.previous(&#39;b&#39;)); // 输出: &#39;a&#39; console.log(seriesObj.spin(&#39;b&#39;, 1)); // 输出: &#39;c&#39; console.log(seriesObj.spin(&#39;b&#39;, -1)); // 输出: &#39;a&#39;</p>',12)]))}const g=i(n,[["render",r]]);export{d as __pageData,g as default};

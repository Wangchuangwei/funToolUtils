import{_ as t,c as i,o as s,ae as e,j as r}from"./chunks/framework.G-5Kj65K.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"etc/doc/cfunctool.filterobjectarray.md","filePath":"etc/doc/cfunctool.filterobjectarray.md"}'),n={name:"etc/doc/cfunctool.filterobjectarray.md"};function l(p,a,h,c,k,o){return s(),i("div",null,a[0]||(a[0]=[e('<p><a href="./">Home</a> &gt; <a href="./cfunctool.html">cfunctool</a> &gt; <a href="./cfunctool.filterobjectarray.html">filterObjectArray</a></p><h2 id="filterobjectarray-function" tabindex="-1">filterObjectArray() function <a class="header-anchor" href="#filterobjectarray-function" aria-label="Permalink to &quot;filterObjectArray() function&quot;">​</a></h2><p>使用比较函数过滤对象数组。</p><p><strong>Signature:</strong></p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> declare</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> filterObjectArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">array</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">compareFunc</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table><thead><tr><th><p>Parameter</p></th><th><p>Type</p></th><th><p>Description</p></th></tr></thead><tbody><tr><td><p>array</p></td><td><p>Array&lt;any&gt;</p></td><td><p>要过滤的对象数组。</p></td></tr><tr><td><p>compareFunc</p></td><td><p>(a: any, b: any) =&gt; any</p></td><td><p>用于比较数组元素的函数，该函数接收两个参数并返回一个值。</p></td></tr></tbody></table> **Returns:** <p>any</p><p>如果数组不存在或为空则返回 null，否则返回通过 <code>compareFunc</code> 归约后的结果。</p><h2 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h2>',11),r("p",{"id:":"","2,":"","value:":"",20:""},"const array = [{ id: 1, value: 10 }, { id: 2, value: 20 }]; const compareFunc = (acc, curr) => acc.value > curr.value ? acc : curr; console.log(filterObjectArray(array, compareFunc)); // 输出:",-1)]))}const g=t(n,[["render",l]]);export{y as __pageData,g as default};
